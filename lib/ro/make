#!/bin/bash
# This file is part of Rodent Linux
# Copyright 2015-2016 Emil Renner Berthing

set -e

readonly -a archs=(${1//,/ })
shift

. "$RODENT/settings"

usage() {
  echo 'ro make [options] [recipe]'
  echo
  echo 'Build package from recipe'
  echo 'If recipe is not specified try ./recipe'
  echo
  echo 'Options:'
  echo ' -s SYSROOT  Use sysroot at SYSROOT'
  echo ' -D          Skip installing dependencies'
  echo ' -E          Skip extracting sources'
  echo ' -B          Skip building'
  echo ' -P          Skip packaging'
  echo ' -r          Repackage (skip dependencies, extracting and building)'
  echo ' -h          This help menu'
}

dependencies=1
extract=1
build=1
package=1

while getopts :s:DEBPrh opt; do
  case "$opt" in
  s) SYSROOT="$(readlink -f "$OPTARG")";;
  D) dependencies=0;;
  E) extract=0;;
  B) build=0;;
  P) package=0;;
  r) dependencies=0; extract=0; build=0;;
  h)
    usage
    exit 0;;
  \?)
    echo "Unknown option -$OPTARG"
    usage
    exit 1;;
  esac
done
shift $((OPTIND-1))

if [[ -n "$1" ]]; then
  if [[ -f "$1" ]]; then
    recipe="$1"
  elif [[ -f "$1/recipe" ]]; then
    recipe="$1/recipe"
  elif [[ -f "$RODENT/recipes/$1/recipe" ]]; then
    recipe="$RODENT/recipes/$1/recipe"
  else
    echo "Could not find package '$1'"
    exit 1
  fi
else
  if [[ -f ./recipe ]]; then
    recipe='./recipe'
  else
    echo "Could not find recipe file in current directory"
    exit 1
  fi
fi
recipe="$(readlink -f "$recipe")"

for arch in "${archs[@]}"; do
  "$RODENT/lib/ro/make-download" "$arch" "$recipe" "$dependencies" "$extract"
done

readonly n=${#archs[@]}
declare -a ret

killchildren() {
  for ((i=1;i<=n;i++)); do
    kill -s TERM %$i || true
  done
}
trap -- killchildren INT TERM
for ((i=0;i<n;i++)); do
  "$RODENT/lib/ro/make-build" "${archs[$i]}" "$recipe" \
    "$dependencies" "$extract" "$build" "$package" &
  ret[$i]=1
done

set +e
for ((i=0;i<n;i++)); do
  wait %$((i+1))
  ret[$i]=$?
done
set -e
trap -- - INT TERM

[[ $package -gt 0 ]] || exit 0

. "$RODENT/lib/ro/makerepo.sh"

cd "$RODENT/cache/local"
for ((i=0;i<n;i++)); do
  if [[ ${ret[$i]} -eq 0 ]]; then
    makerepo "${archs[$i]}"
  else
    echo "Failed to build for ${archs[$i]}: ${ret[$i]}"
  fi
done

# vim: set ft=sh ts=2 sw=2 et:
