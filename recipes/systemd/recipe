parts=(
  libudev
  libsystemd
  systemd-shared
  systemd-init
  systemd-initrd
  systemd-configfs
  systemd-debugfs
  systemd-binfmt_misc
  systemd-ldconfig
  systemd-fsck
  systemd-modules-load
  systemd-hostname
  systemd-coredump
  systemd-networkd
  systemd-resolved
  systemd-timesyncd
  systemd-timedated
  systemd-localed
  systemd-backlight
  systemd-ask-password
  systemd-vconsole-setup
  systemd-logind
  systemd-rfkill
  libnss_myhostname
  systemd-fstab-generator
  systemd-gpt-auto-generator
  systemd-cgls
  systemd-cgtop
  systemd-cat
  systemd-delta
  systemd-detect-virt
  systemd-escape
  systemd-inhibit
  systemd-notify
  systemd-path
  systemd-run
  systemd-stdio-bridge
  systemd-hwdb
  systemd-catalog
  busctl
  systemd-bash-completion
  systemd-zsh-completion
)
version=231
release=1
sources=("https://github.com/systemd/systemd/archive/v${version}.tar.gz")
sha1sum=('47768103290d2023c3452bc36bc77f7b1fd798ea')
makedepends=(
  'libcap-devel'
  'libz-devel'
  'libseccomp-devel'
  'libkmod-devel'
  'libpam_misc-devel'
  'libmount-devel'
  'libidn-devel'
  'libcurl-devel'
)
case $arch in
armv7hl|rpi|x86_64|quark)
  parts+=(systemd-boot)
  makedepends+=('gnu-efi-devel')
  ;;
esac

config-libudev() {
  description='The udev library'
  depends=('libm' 'librt' 'libresolv' 'libcap')
  devdepends=('glibc-devel' "libudev=$version-$release")
  files=('usr/lib/libudev.so.*')
  devfiles=(
    'usr/include/libudev.h'
    'usr/lib/libudev.so'
    'usr/lib/pkgconfig/libudev.pc'
  )
}

config-libsystemd() {
  description='The systemd library'
  depends=('libm' 'librt' 'libresolv' 'libcap')
  devdepends=('glibc-devel' "libsystemd=$version-$release")
  files=('usr/lib/libsystemd.so.*')
  devfiles=(
    'usr/include/systemd/*'
    'usr/lib/libsystemd.so'
    'usr/lib/pkgconfig/libsystemd.pc'
  )
}

config-systemd-shared() {
  description='System and service manager'
  provides=("udev=$version-$release")
  depends=(
    'libm'
    'librt'
    'libresolv'
    'libcap'
    'libseccomp'
    'libkmod'
    'libpam'
    'libidn'
    'libmount'
    'mount'
  )
  files=(
    '#/users.d/10-udev.sh'
    '#/users.d/10-systemd-journal.sh'
    'usr/bin/systemctl'
    'usr/bin/systemd-tmpfiles'
    'usr/bin/udevadm'
    "usr/lib/libsystemd-shared-${version}.so"
    'usr/lib/systemd/system/basic.target'
    'usr/lib/systemd/system/ctrl-alt-del.target'
    'usr/lib/systemd/system/emergency.service'
    'usr/lib/systemd/system/emergency.target'
    'usr/lib/systemd/system/final.target'
    'usr/lib/systemd/system/local-fs-pre.target'
    'usr/lib/systemd/system/local-fs.target'
    'usr/lib/systemd/system/paths.target'
    'usr/lib/systemd/system/reboot.target'
    'usr/lib/systemd/system/rescue.service'
    'usr/lib/systemd/system/rescue.target'
    'usr/lib/systemd/system/shutdown.target'
    'usr/lib/systemd/system/sigpwr.target'
    'usr/lib/systemd/system/slices.target'
    'usr/lib/systemd/system/sockets.target'
    'usr/lib/systemd/system/sockets.target.wants/systemd-journald-audit.socket'
    'usr/lib/systemd/system/sockets.target.wants/systemd-journald-dev-log.socket'
    'usr/lib/systemd/system/sockets.target.wants/systemd-journald.socket'
    'usr/lib/systemd/system/sockets.target.wants/systemd-udevd-control.socket'
    'usr/lib/systemd/system/sockets.target.wants/systemd-udevd-kernel.socket'
    'usr/lib/systemd/system/sysinit.target'
    'usr/lib/systemd/system/sysinit.target.wants/systemd-journald.service'
    'usr/lib/systemd/system/sysinit.target.wants/systemd-tmpfiles-setup-dev.service'
    'usr/lib/systemd/system/sysinit.target.wants/systemd-udev-trigger.service'
    'usr/lib/systemd/system/sysinit.target.wants/systemd-udevd.service'
    'usr/lib/systemd/system/systemd-halt.service'
    'usr/lib/systemd/system/systemd-journald-audit.socket'
    'usr/lib/systemd/system/systemd-journald-dev-log.socket'
    'usr/lib/systemd/system/systemd-journald.service'
    'usr/lib/systemd/system/systemd-journald.socket'
    'usr/lib/systemd/system/systemd-reboot.service'
    'usr/lib/systemd/system/systemd-tmpfiles-setup-dev.service'
    'usr/lib/systemd/system/systemd-udev-trigger.service'
    'usr/lib/systemd/system/systemd-udevd-control.socket'
    'usr/lib/systemd/system/systemd-udevd-kernel.socket'
    'usr/lib/systemd/system/systemd-udevd.service'
    'usr/lib/systemd/system/timers.target'
    'usr/lib/systemd/system/umount.target'
    'usr/lib/systemd/systemd'
    'usr/lib/systemd/systemd-journald'
    'usr/lib/systemd/systemd-sysctl'
    'usr/lib/systemd/systemd-udevd'
    'usr/lib/udev/ata_id'
    'usr/lib/udev/cdrom_id'
    'usr/lib/udev/collect'
    'usr/lib/udev/hwdb.d'
    'usr/lib/udev/mtd_probe'
    'usr/lib/udev/rules.d/50-udev-default.rules'
    'usr/lib/udev/rules.d/60-block.rules'
    'usr/lib/udev/rules.d/60-cdrom_id.rules'
    'usr/lib/udev/rules.d/60-drm.rules'
    'usr/lib/udev/rules.d/60-evdev.rules'
    'usr/lib/udev/rules.d/60-persistent-alsa.rules'
    'usr/lib/udev/rules.d/60-persistent-input.rules'
    'usr/lib/udev/rules.d/60-persistent-storage-tape.rules'
    'usr/lib/udev/rules.d/60-persistent-storage.rules'
    'usr/lib/udev/rules.d/60-persistent-v4l.rules'
    'usr/lib/udev/rules.d/60-serial.rules'
    'usr/lib/udev/rules.d/64-btrfs.rules'
    'usr/lib/udev/rules.d/70-mouse.rules'
    'usr/lib/udev/rules.d/70-power-switch.rules'
    'usr/lib/udev/rules.d/70-touchpad.rules'
    'usr/lib/udev/rules.d/70-uaccess.rules'
    'usr/lib/udev/rules.d/75-net-description.rules'
    'usr/lib/udev/rules.d/75-probe_mtd.rules'
    'usr/lib/udev/rules.d/78-sound-card.rules'
    'usr/lib/udev/rules.d/80-drivers.rules'
    'usr/lib/udev/rules.d/80-net-setup-link.rules'
    'usr/lib/udev/rules.d/99-systemd.rules'
    'usr/lib/udev/scsi_id'
    'usr/lib/udev/v4l_id'
  )
}

config-systemd-init() {
  description='Systemd init files'
  provides=("systemd=$version-$release")
  depends=('filesystem' 'dbus-daemon' "systemd-shared=$version-$release")
  files=(
    'usr/bin/init'
    'usr/bin/journalctl'
    'usr/lib/sysctl.d/50-default.conf'
    'usr/lib/systemd/system-shutdown'
    'usr/lib/systemd/system-sleep'
    'usr/lib/systemd/system/-.slice'
    'usr/lib/systemd/system/busnames.target'
    'usr/lib/systemd/system/busnames.target.wants/org.freedesktop.systemd1.busname'
    'usr/lib/systemd/system/default.target'
    'usr/lib/systemd/system/dev-hugepages.mount'
    'usr/lib/systemd/system/dev-mqueue.mount'
    'usr/lib/systemd/system/graphical.target'
    'usr/lib/systemd/system/halt.target'
    'usr/lib/systemd/system/hybrid-sleep.target'
    'usr/lib/systemd/system/local-fs.target.wants/tmp.mount'
    'usr/lib/systemd/system/local-fs.target.wants/var.mount'
    'usr/lib/systemd/system/multi-user.target'
    'usr/lib/systemd/system/nss-lookup.target'
    'usr/lib/systemd/system/nss-user-lookup.target'
    'usr/lib/systemd/system/org.freedesktop.systemd1.busname'
    'usr/lib/systemd/system/poweroff.target'
    'usr/lib/systemd/system/sleep.target'
    'usr/lib/systemd/system/sound.target'
    'usr/lib/systemd/system/suspend.target'
    'usr/lib/systemd/system/sysinit.target.wants/dev-hugepages.mount'
    'usr/lib/systemd/system/sysinit.target.wants/dev-mqueue.mount'
    'usr/lib/systemd/system/sysinit.target.wants/swap.target'
    'usr/lib/systemd/system/sysinit.target.wants/systemd-sysctl.service'
    'usr/lib/systemd/system/sysinit.target.wants/systemd-tmpfiles-setup.service'
    'usr/lib/systemd/system/system.slice'
    'usr/lib/systemd/system/systemd-hybrid-sleep.service'
    'usr/lib/systemd/system/systemd-journal-flush.service'
    'usr/lib/systemd/system/systemd-poweroff.service'
    'usr/lib/systemd/system/systemd-suspend.service'
    'usr/lib/systemd/system/systemd-sysctl.service'
    'usr/lib/systemd/system/systemd-tmpfiles-clean.service'
    'usr/lib/systemd/system/systemd-tmpfiles-clean.timer'
    'usr/lib/systemd/system/systemd-tmpfiles-setup.service'
    'usr/lib/systemd/system/systemd-udev-settle.service'
    'usr/lib/systemd/system/swap.target'
    'usr/lib/systemd/system/time-sync.target'
    'usr/lib/systemd/system/timers.target.wants/systemd-tmpfiles-clean.timer'
    'usr/lib/systemd/system/tmp.mount'
    'usr/lib/systemd/system/var.mount'
    'usr/lib/systemd/systemd-cgroups-agent'
    'usr/lib/systemd/systemd-shutdown'
    'usr/lib/systemd/systemd-sleep'
    'usr/lib/tmpfiles.d/systemd-nologin.conf'
    'usr/lib/tmpfiles.d/systemd.conf'
    'usr/lib/tmpfiles.d/tmp.conf'
    'usr/lib/tmpfiles.d/var.conf'
    'usr/share/dbus-1/services/org.freedesktop.systemd1.service'
    'usr/share/dbus-1/system-services/org.freedesktop.systemd1.service'
    'usr/share/dbus-1/system.d/org.freedesktop.systemd1.conf'
  )
}

config-systemd-initrd() {
  description='Systemd initrd files'
  provides=("systemd=$version-$release")
  depends=('filesystem-initrd' "systemd-shared=$version-$release")
  files=(
    'init'
    'usr/lib/systemd/system/initrd-cleanup.service'
    'usr/lib/systemd/system/initrd-fs.target'
    'usr/lib/systemd/system/initrd-parse-etc.service'
    'usr/lib/systemd/system/initrd-root-device.target'
    'usr/lib/systemd/system/initrd-root-fs.target'
    'usr/lib/systemd/system/initrd-switch-root.service'
    'usr/lib/systemd/system/initrd-switch-root.target'
    'usr/lib/systemd/system/initrd-udevadm-cleanup-db.service'
    'usr/lib/systemd/system/initrd.target'
  )
}

config-systemd-configfs() {
  description='Systemd init files for configfs'
  depends=("systemd=$version-$release")
  files=(
    'usr/lib/systemd/system/sys-kernel-config.mount'
    'usr/lib/systemd/system/sysinit.target.wants/sys-kernel-config.mount'
  )
}

config-systemd-debugfs() {
  description='Systemd init files for debugfs'
  depends=("systemd=$version-$release")
  files=(
    'usr/lib/systemd/system/sys-kernel-debug.mount'
    'usr/lib/systemd/system/sysinit.target.wants/sys-kernel-debug.mount'
  )
}

config-systemd-binfmt_misc() {
  description='Systemd utilities to configure additional binary formats'
  depends=("systemd=$version-$release")
  files=(
    'usr/lib/binfmt.d'
    'usr/lib/systemd/system/proc-sys-fs-binfmt_misc.automount'
    'usr/lib/systemd/system/proc-sys-fs-binfmt_misc.mount'
    'usr/lib/systemd/system/sysinit.target.wants/proc-sys-fs-binfmt_misc.automount'
    'usr/lib/systemd/system/sysinit.target.wants/systemd-binfmt.service'
    'usr/lib/systemd/system/systemd-binfmt.service'
    'usr/lib/systemd/systemd-binfmt'
  )
}

config-systemd-ldconfig() {
  description='Systemd service to rebuild ld.so.cache at boot'
  depends=("systemd=$version-$release" 'ldconfig')
  files=(
    'usr/lib/systemd/system/ldconfig.service'
    'usr/lib/systemd/system/sysinit.target.wants/ldconfig.service'
  )
}

config-systemd-fsck() {
  description='Systemd File system checker logic'
  depends=("systemd=$version-$release" 'fsck')
  files=(
    'usr/lib/systemd/system/systemd-fsck@.service'
    'usr/lib/systemd/systemd-fsck'
  )
}

config-systemd-modules-load() {
  description='Load kernel modules at boot'
  depends=("systemd=$version-$release" 'libkmod' 'kmod')
  files=(
    'usr/lib/modules-load.d'
    'usr/lib/systemd/system/kmod-static-nodes.service'
    'usr/lib/systemd/system/sysinit.target.wants/kmod-static-nodes.service'
    'usr/lib/systemd/system/sysinit.target.wants/systemd-modules-load.service'
    'usr/lib/systemd/system/systemd-modules-load.service'
    'usr/lib/systemd/systemd-modules-load'
  )
}

config-systemd-hostname() {
  description='Systemd hostname utilities'
  depends=("systemd=$version-$release")
  files=(
    'usr/bin/hostnamectl'
    'usr/lib/systemd/system/busnames.target.wants/org.freedesktop.hostname1.busname'
    'usr/lib/systemd/system/dbus-org.freedesktop.hostname1.service'
    'usr/lib/systemd/system/org.freedesktop.hostname1.busname'
    'usr/lib/systemd/system/systemd-hostnamed.service'
    'usr/lib/systemd/systemd-hostnamed'
    'usr/share/dbus-1/system-services/org.freedesktop.hostname1.service'
    'usr/share/dbus-1/system.d/org.freedesktop.hostname1.conf'
  )
}

config-systemd-coredump() {
  description='Systemd coredump utility'
  depends=("systemd=$version-$release")
  files=(
    '#/users.d/10-systemd-coredump.sh'
    'usr/bin/coredumpctl'
    'usr/lib/sysctl.d/50-coredump.conf'
    'usr/lib/systemd/system/sockets.target.wants/systemd-coredump.socket'
    'usr/lib/systemd/system/systemd-coredump.socket'
    'usr/lib/systemd/system/systemd-coredump@.service'
    'usr/lib/systemd/systemd-coredump'
  )
}

config-systemd-networkd() {
  description='Systemd network daemon'
  depends=("systemd=$version-$release")
  files=(
    '#/users.d/10-systemd-network.sh'
    'usr/bin/networkctl'
    'usr/lib/systemd/network'
    'usr/lib/systemd/network/80-container-host0.network'
    'usr/lib/systemd/network/99-default.link'
    'usr/lib/systemd/system/busnames.target.wants/org.freedesktop.network1.busname'
    'usr/lib/systemd/system/dbus-org.freedesktop.network1.service'
    'usr/lib/systemd/system/network-online.target'
    'usr/lib/systemd/system/network-online.target.wants/systemd-networkd-wait-online.service'
    'usr/lib/systemd/system/network-pre.target'
    'usr/lib/systemd/system/network.target'
    'usr/lib/systemd/system/org.freedesktop.network1.busname'
    'usr/lib/systemd/system/systemd-networkd-wait-online.service'
    'usr/lib/systemd/system/systemd-networkd.service'
    'usr/lib/systemd/system/systemd-networkd.socket'
    'usr/lib/systemd/systemd-networkd'
    'usr/lib/systemd/systemd-networkd-wait-online'
    'usr/share/dbus-1/system-services/org.freedesktop.network1.service'
    'usr/share/dbus-1/system.d/org.freedesktop.network1.conf'
  )
}

config-systemd-resolved() {
  description='Systemd resolver daemon'
  depends=("systemd=$version-$release")
  files=(
    '#/nsswitch.d/40-resolve.sh'
    '#/users.d/10-systemd-resolve.sh'
    'usr/bin/systemd-resolve'
    'usr/lib/systemd/resolv.conf'
    'usr/lib/systemd/system/busnames.target.wants/org.freedesktop.resolve1.busname'
    'usr/lib/systemd/system/dbus-org.freedesktop.resolve1.service'
    'usr/lib/systemd/system/org.freedesktop.resolve1.busname'
    'usr/lib/systemd/system/systemd-resolved.service'
    'usr/lib/systemd/systemd-resolved'
    'usr/lib/libnss_resolve.so.2'
    'usr/share/dbus-1/system-services/org.freedesktop.resolve1.service'
    'usr/share/dbus-1/system.d/org.freedesktop.resolve1.conf'
  )
}

config-systemd-timesyncd() {
  description='Systemd ntp client'
  depends=("systemd=$version-$release")
  files=(
    '#/users.d/10-systemd-timesync.sh'
    'usr/lib/systemd/system/systemd-timesyncd.service'
    'usr/lib/systemd/systemd-timesyncd'
  )
}

config-systemd-timedated() {
  description='Systemd date/time daemon'
  depends=("systemd=$version-$release")
  files=(
    'usr/bin/timedatectl'
    'usr/lib/systemd/system/busnames.target.wants/org.freedesktop.timedate1.busname'
    'usr/lib/systemd/system/dbus-org.freedesktop.timedate1.service'
    'usr/lib/systemd/system/org.freedesktop.timedate1.busname'
    'usr/lib/systemd/system/systemd-timedated.service'
    'usr/lib/systemd/systemd-timedated'
    'usr/share/dbus-1/system-services/org.freedesktop.timedate1.service'
    'usr/share/dbus-1/system.d/org.freedesktop.timedate1.conf'
  )
}

config-systemd-localed() {
  description='Systemd locale daemon'
  depends=("systemd=$version-$release")
  files=(
    'usr/bin/localectl'
    'usr/lib/systemd/system/busnames.target.wants/org.freedesktop.locale1.busname'
    'usr/lib/systemd/system/dbus-org.freedesktop.locale1.service'
    'usr/lib/systemd/system/org.freedesktop.locale1.busname'
    'usr/lib/systemd/system/systemd-localed.service'
    'usr/lib/systemd/systemd-localed'
    'usr/share/dbus-1/system-services/org.freedesktop.locale1.service'
    'usr/share/dbus-1/system.d/org.freedesktop.locale1.conf'
  )
}

config-systemd-backlight() {
  description='Systemd backlight handling service'
  depends=("systemd=$version-$release")
  files=(
    'usr/lib/systemd/system/systemd-backlight@.service'
    'usr/lib/systemd/systemd-backlight'
  )
}

config-systemd-ask-password() {
  description='Systemd password asking tools'
  depends=("systemd=$version-$release")
  files=(
    'usr/bin/systemd-ask-password'
    'usr/bin/systemd-tty-ask-password-agent'
    'usr/lib/systemd/system/systemd-ask-password-console.path'
    'usr/lib/systemd/system/systemd-ask-password-console.service'
    'usr/lib/systemd/system/systemd-ask-password-wall.path'
    'usr/lib/systemd/system/systemd-ask-password-wall.service'
    'usr/lib/systemd/systemd-reply-password'
  )
}

config-systemd-vconsole-setup() {
  description='Systemd virtual console setup daemon'
  depends=("systemd=$version-$release" 'loadkeys' 'setfont')
  files=(
    'usr/lib/systemd/system/sysinit.target.wants/systemd-vconsole-setup.service'
    'usr/lib/systemd/system/systemd-vconsole-setup.service'
    'usr/lib/systemd/systemd-vconsole-setup'
    'usr/lib/udev/rules.d/90-vconsole.rules'
  )
}

config-systemd-logind() {
  description='Systemd login daemon'
  depends=('libpam_misc' "systemd=$version-$release" 'agetty' 'kill')
  files=(
    'usr/bin/loginctl'
    'usr/lib/security/pam_systemd.so'
    'usr/lib/systemd/system-generators/systemd-getty-generator'
    'usr/lib/systemd/system/autovt@.service'
    'usr/lib/systemd/system/busnames.target.wants/org.freedesktop.login1.busname'
    'usr/lib/systemd/system/console-getty.service'
    'usr/lib/systemd/system/container-getty@.service'
    'usr/lib/systemd/system/dbus-org.freedesktop.login1.service'
    'usr/lib/systemd/system/getty.target'
    'usr/lib/systemd/system/getty@.service'
    'usr/lib/systemd/system/multi-user.target.wants/systemd-logind.service'
    'usr/lib/systemd/system/multi-user.target.wants/getty.target'
    'usr/lib/systemd/system/multi-user.target.wants/systemd-user-sessions.service'
    'usr/lib/systemd/system/org.freedesktop.login1.busname'
    'usr/lib/systemd/system/serial-getty@.service'
    'usr/lib/systemd/system/systemd-logind.service'
    'usr/lib/systemd/system/systemd-user-sessions.service'
    'usr/lib/systemd/system/user.slice'
    'usr/lib/systemd/system/user@.service'
    'usr/lib/systemd/systemd-logind'
    'usr/lib/systemd/systemd-user-sessions'
    'usr/lib/systemd/user/basic.target'
    'usr/lib/systemd/user/busnames.target'
    'usr/lib/systemd/user/default.target'
    'usr/lib/systemd/user/exit.target'
    'usr/lib/systemd/user/paths.target'
    'usr/lib/systemd/user/shutdown.target'
    'usr/lib/systemd/user/sockets.target'
    'usr/lib/systemd/user/sound.target'
    'usr/lib/systemd/user/systemd-exit.service'
    'usr/lib/systemd/user/timers.target'
    'usr/lib/udev/rules.d/71-seat.rules'
    'usr/lib/udev/rules.d/73-seat-late.rules'
    'usr/share/dbus-1/system-services/org.freedesktop.login1.service'
    'usr/share/dbus-1/system.d/org.freedesktop.login1.conf'
  )
}

config-systemd-boot() {
  description='systemd-boot EFI boot manager'
  provides=('bootctl')
  depends=('libblkid')
  files=('usr/bin/bootctl' 'usr/lib/systemd/boot/**')
}

config-systemd-rfkill() {
  description='Systemd rfkill utilities'
  depends=("systemd=$version-$release")
  files=(
    'usr/lib/systemd/system/systemd-rfkill.service'
    'usr/lib/systemd/system/systemd-rfkill.socket'
    'usr/lib/systemd/systemd-rfkill'
  )
}

config-libnss_myhostname() {
  description='Provide hostname resolution for the locally configured system hostname'
  depends=('libcap')
  files=(
    '#/nsswitch.d/80-myhostname.sh'
    'usr/lib/libnss_myhostname.so.2'
  )
}

config-systemd-fstab-generator() {
  description='Unit generator for /etc/fstab'
  depends=("systemd=$version-$release")
  files=(
    'usr/lib/systemd/system-generators/systemd-fstab-generator'
    'usr/lib/systemd/system/local-fs.target.wants/systemd-remount-fs.service'
    'usr/lib/systemd/system/systemd-remount-fs.service'
    'usr/lib/systemd/systemd-remount-fs'
  )
}

config-systemd-gpt-auto-generator() {
  description='Unit generator for mounts based on GPT partition table'
  depends=("systemd=$version-$release")
  files=(
    'usr/lib/systemd/system-generators/systemd-gpt-auto-generator'
  )
}

config-systemd-cgls() {
  description='Recursively show control group contents'
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/systemd-cgls')
}

config-systemd-cgtop() {
  description='Show top control groups by their resource usage'
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/systemd-cgtop')
}

config-systemd-cat() {
  description="Connect a pipeline or program's output with the journal"
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/systemd-cat')
}

config-systemd-delta() {
  description='Find overridden configuration files'
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/systemd-delta')
}

config-systemd-detect-virt() {
  description='Detect execution in a virtualized environment'
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/systemd-detect-virt')
}

config-systemd-escape() {
  description='Escape strings for usage in system unit names'
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/systemd-escape')
}

config-systemd-inhibit() {
  description='Execute a program with an inhibition lock taken'
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/systemd-inhibit')
}

config-systemd-notify() {
  description='Notify systemd about status changes'
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/systemd-notify')
}

config-systemd-path() {
  description='List and query system and user paths'
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/systemd-path')
}

config-systemd-run() {
  description='Run programs in transient scope or service or timer units'
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/systemd-run')
}

config-systemd-stdio-bridge() {
  description='Connect standard input/output to a given bus address'
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/systemd-stdio-bridge')
}

config-systemd-hwdb() {
  description='Systemd hardware database'
  depends=("systemd=$version-$release")
  files=(
    'usr/bin/systemd-hwdb'
    'usr/lib/systemd/system/sysinit.target.wants/systemd-hwdb-update.service'
    'usr/lib/systemd/system/systemd-hwdb-update.service'
    'usr/lib/udev/hwdb.d/*.hwdb'
  )
}

config-systemd-catalog() {
  description='Systemd message catalogs'
  depends=("systemd-init=$version-$release")
  files=(
    'usr/lib/systemd/catalog/*.catalog'
    'usr/lib/systemd/system/sysinit.target.wants/systemd-journal-catalog-update.service'
    'usr/lib/systemd/system/systemd-journal-catalog-update.service'
  )
}

config-busctl() {
  description='Introspect D-Bus'
  depends=("systemd-shared=$version-$release")
  files=('usr/bin/busctl')
}

config-systemd-bash-completion() {
  description='Bash completion for systemd'
  depends=('bash')
  files=('usr/share/bash-completion/**')
}

config-systemd-zsh-completion() {
  description='Zsh completion for systemd'
  depends=('zsh')
  files=('usr/share/zsh/**')
}

build() {
  cd systemd-$version
  patch -Np1 -i "$srcdir/no-stack-protection.patch"
  patch -Np1 -i "$srcdir/no-sbin-path.patch"
  patch -Np1 -i "$srcdir/libsystemd-shared-path.patch"
  patch -Np1 -i "$srcdir/ldconfig.patch"
  patch -Np1 -i "$srcdir/dont-hardcode-swap.patch"
  patch -Np1 -i "$srcdir/no-same-check.patch"
  patch -Np1 -i "$srcdir/seat-late-no-uaccess.patch"
  patch -Np1 -i "$srcdir/no-plymouth.patch"
  patch -Np1 -i "$srcdir/arm-efi.patch"

  ./autogen.sh

  local archopts
  case $arch in
  armv7hl|rpi|x86_64|quark) archopts=(
      --enable-efi --enable-gnuefi
      "--with-efi-includedir=$SYSROOT/usr/include"
      "--with-efi-libdir=$SYSROOT/usr/lib"
    );;
  mips|mipsel) archopts=(
      --disable-efi --disable-gnuefi
    );;
  *)
    echo "Unknown architecture '$arch'."
    exit 1;;
  esac

  ./configure \
    ac_cv_path_KILL=/usr/bin/kill \
    ac_cv_path_KMOD=/usr/bin/kmod \
    ac_cv_path_MOUNT_PATH=/usr/bin/mount \
    ac_cv_path_SULOGIN=/usr/bin/sulogin \
    ac_cv_path_UMOUNT_PATH=/usr/bin/umount \
    --host=$host \
    --prefix=/usr \
    --libexecdir=/usr/lib \
    --sysconfdir=/etc \
    --disable-nls \
    --disable-utmp \
    --disable-xkbcommon \
    --disable-ima \
    --disable-selinux \
    --disable-apparmor \
    --disable-adm-group \
    --disable-wheel-group \
    --disable-xz \
    --disable-lz4 \
    --disable-acl \
    --disable-smack \
    --disable-gcrypt \
    --disable-audit \
    --disable-qrencode \
    --disable-gnutls \
    --disable-microhttpd \
    --disable-libiptc \
    --disable-quotacheck \
    --disable-tests \
    --disable-manpages \
    --disable-gnutls \
    --disable-gcrypt \
    --disable-libcryptsetup \
    --disable-polkit \
    --with-tty-gid=5 \
    --with-rc-local-script-path-start=/etc/start.local \
    --with-rc-local-script-path-stop=/etc/stop.local \
    --with-sysvinit-path= \
    --with-sysvrcnd-path= \
    --with-dbuspolicydir=/usr/share/dbus-1/system.d \
    --with-gnu-ld \
    --with-sysroot="$SYSROOT" \
    "${archopts[@]}"

  make
}

package() {
  cd systemd-$version

  make DESTDIR="$pkgdir" install

  ln -sf 'multi-user.target' "$pkgdir/usr/lib/systemd/system/default.target"
  #install -dm755 "$pkgdir/usr/lib/systemd/system.conf.d"
  install -m644 "$srcdir/var.mount" "$pkgdir/usr/lib/systemd/system/var.mount"
  ln -s '../var.mount' "$pkgdir/usr/lib/systemd/system/local-fs.target.wants/var.mount"

  # let network-online.target depend on systemd-networkd-wait-online
  # when networkd is installed
  install -dm755 "$pkgdir/usr/lib/systemd/system/network-online.target.wants"
  ln -s '../systemd-networkd-wait-online.service' \
    "$pkgdir/usr/lib/systemd/system/network-online.target.wants/systemd-networkd-wait-online.service"
  rm -r "$pkgdir/etc/systemd/system/network-online.target.wants"

  # move the default configuration to /usr/share/factory
  mv "$pkgdir"/etc/pam.d/* "$pkgdir/usr/share/factory/etc/pam.d"
  rmdir "$pkgdir/etc/pam.d"
  mv "$pkgdir"/etc/* "$pkgdir/usr/share/factory/etc"
  rmdir "$pkgdir/etc"

  rm "$pkgdir"/usr/lib/{,security/}*.la
  rm -r "$pkgdir/usr/lib/rpm"
  rm -r "$pkgdir/usr/share/doc"
  rm -r "$pkgdir/usr/var"
  rm -r "$pkgdir/var"

  ln -s 'usr/lib/systemd/systemd' "$pkgdir/init"
  ln -s '../lib/systemd/systemd' "$pkgdir/usr/bin/init"

  install -dm755 "$pkgdir/#/nsswitch.d"
  install -m644 "$srcdir/nsswitch-resolve.sh"       "$pkgdir/#/nsswitch.d/40-resolve.sh"
  install -m644 "$srcdir/nsswitch-myhostname.sh"    "$pkgdir/#/nsswitch.d/80-myhostname.sh"

  install -dm755 "$pkgdir/#/users.d"
  install -m644 "$srcdir/users-udev.sh"             "$pkgdir/#/users.d/10-udev.sh"
  install -m644 "$srcdir/users-systemd-journal.sh"  "$pkgdir/#/users.d/10-systemd-journal.sh"
  install -m644 "$srcdir/users-systemd-resolve.sh"  "$pkgdir/#/users.d/10-systemd-resolve.sh"
  install -m644 "$srcdir/users-systemd-network.sh"  "$pkgdir/#/users.d/10-systemd-network.sh"
  install -m644 "$srcdir/users-systemd-timesync.sh" "$pkgdir/#/users.d/10-systemd-timesync.sh"
  install -m644 "$srcdir/users-systemd-coredump.sh" "$pkgdir/#/users.d/10-systemd-coredump.sh"
}

# vim: set ft=sh ts=2 sw=2 et:
